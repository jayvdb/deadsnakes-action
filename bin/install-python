#!/usr/bin/env python3
import argparse
import contextlib
import os.path
import shlex
import subprocess
from typing import Generator
from typing import NamedTuple


class Group(NamedTuple):
    section: str
    cmds: tuple[tuple[str, ...], ...]

    @classmethod
    def make(cls, section: str, *cmds: tuple[str, ...]) -> Group:
        return cls(section, cmds)


@contextlib.contextmanager
def _group(s: str) -> Generator[None, None, None]:
    print(f'::group::{s}')
    try:
        yield
    finally:
        print('::endgroup::')


def _print_call(*args: str) -> int:
    cmd = ' '.join(shlex.quote(arg) for arg in args)
    print(f'[command] {cmd}', flush=True)
    return subprocess.call(args)


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('version')
    parser.add_argument('--debug', action='store_true')
    args = parser.parse_args()

    if args.version.endswith('-dev'):
        version = args.version[:-1 * len('-dev')]
        ppa = 'ppa:deadsnakes/nightly'
    else:
        version = args.version
        ppa = 'ppa:deadsnakes/ppa'

    py = f'python{version}'
    packages = [f'{py}-dev']
    if args.debug:
        packages.append(f'{py}-dbg')

    py_executable = f'{py}-dbg' if args.debug else py

    groups = (
        Group.make(
            f'add ppa {ppa}',
            ('sudo', 'add-apt-repository', '--yes', ppa),
        ),
        Group.make(
            f'install {py}',
            (
                'sudo', 'apt-get', 'install', '-y', '--no-install-recommends',
                *packages,
            ),
        ),
    )

    for group in groups:
        with _group(group.section):
            for cmd in group.cmds:
                if _print_call(*cmd):
                    return 1

    with open(os.environ['GITHUB_PATH'], 'a') as fp:
        fp.write(f'{bindir}\n')

    return 0


if __name__ == '__main__':
    raise SystemExit(main())
